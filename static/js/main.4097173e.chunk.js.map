{"version":3,"sources":["MainInput.js","serviceWorker.js","index.js"],"names":["IntroInformation","props","ChooseAWorkout","workouts","Math","floor","random","length","MainInput","state","intro","buttonText","workoutInfo","repNumber","this","setState","workout","className","Container","fluid","Row","Col","map","item","key","md","span","offset","Button","variant","size","block","onClick","chooseWorkout","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVA4DA,SAASA,EAAiBC,GACxB,OACE,6BACE,wEACA,yGAKN,SAASC,IACP,IAAIC,EAAW,CACb,CAAC,UAAW,WAAY,SAAU,WAClC,CAAC,cAAe,gBAAiB,iBAAkB,QACnD,CAAC,cAAe,kBAAmB,cAAe,kBAClD,CAAC,eAAgB,gBAAiB,0BAA2B,gBAC7D,CAAC,0BAA2B,gBAAiB,2CAA4C,iBAI3F,OAAOA,EADYC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,SAI1CC,M,kDA1Eb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAEDQ,MAAQ,CACXC,OAAO,EACPC,WAAY,4BACZC,YAAa,KACbC,UAAW,GAPI,E,4DAYjBC,KAAKC,SAAS,CACZL,OAAO,EACPC,WAAY,wBACZK,QAASd,IACTW,UAAWT,KAAKC,MAAsB,GAAhBD,KAAKE,c,+BAIrB,IAAD,OACP,OACE,yBAAKW,UAAU,aACb,kBAACC,EAAA,EAAD,CAAWD,UAAU,iBAAiBE,OAAK,GACzC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGP,KAAKL,MAAMC,MAAQ,kBAClBV,EADkB,MAElB,4BACGc,KAAKL,MAAMO,QAAQM,KAAI,SAAAC,GAAI,OAC1B,wBAAIC,IAAKD,GAAO,EAAKd,MAAMI,UAA3B,IAAuCU,MAEzC,uDAKR,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKI,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,kBAACC,EAAA,EAAD,CAAQX,UAAU,gBAAgBY,QAAQ,UAAUC,KAAK,KAAKC,OAAK,EACjEC,QAAS,kBAAM,EAAKC,kBACnBnB,KAAKL,MAAME,oB,GA1CJuB,aCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4097173e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './MainInput.css';\r\n\r\nclass MainInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      intro: true,\r\n      buttonText: \"Pick Me A Random Workout!\",\r\n      workoutInfo: null,\r\n      repNumber: 0\r\n    }\r\n  }\r\n\r\n  chooseWorkout() {\r\n    this.setState({\r\n      intro: false,\r\n      buttonText: \"I want a new workout!\",\r\n      workout: ChooseAWorkout(),\r\n      repNumber: Math.floor(Math.random() * 15),\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"MainInput\">\r\n        <Container className=\"main-container\" fluid>\r\n          <Row>\r\n            <Col>\r\n              {this.state.intro ? <\r\n                IntroInformation /> :\r\n                <ul>\r\n                  {this.state.workout.map(item => (\r\n                    <li key={item}>{this.state.repNumber} {item}</li>\r\n                  ))}\r\n                  <li>20 Mountain Climbers</li>\r\n                </ul>\r\n              }\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={{ span: 8, offset: 2 }}>\r\n              <Button className=\"random-button\" variant=\"primary\" size=\"lg\" block\r\n                onClick={() => this.chooseWorkout()}>\r\n                {this.state.buttonText}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nfunction IntroInformation(props) {\r\n  return (\r\n    <div>\r\n      <h4>Welcome to the Random Workout Generator!</h4>\r\n      <div>This was designed to produce a random short workout you can do at home.</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction ChooseAWorkout() {\r\n  var workouts = [\r\n    [\"Pushups\", \"Crunches\", \"Squats\", \"Burpees\"],\r\n    [\"Bicep Curls\", \"Spider Crunch\", \"Shoulder Press\", \"Dips\"],\r\n    [\"Upright Row\", \"Superman Crunch\", \"Side Lunges\", \"Tri Extensions\"],\r\n    [\"Quick Squats\", \"Dumbbell Rows\", \"Side to Side Lunge Walk\", \"Zottman Curl\"],\r\n    [\"Squat with Weight Swing\", \"Side Crunches\", \"Side Plank Rotations with Overhead Reach\", \"Incline Curl\"]\r\n  ];\r\n\r\n  var randomNumber = Math.floor(Math.random() * workouts.length);\r\n  return workouts[randomNumber];\r\n}\r\n\r\nexport default MainInput;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport MainInput from './MainInput';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MainInput />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}